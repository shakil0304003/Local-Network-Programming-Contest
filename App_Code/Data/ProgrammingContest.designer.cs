#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ProgrammingContest")]
	public partial class ProgrammingContestDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertContestPermission(ContestPermission instance);
    partial void UpdateContestPermission(ContestPermission instance);
    partial void DeleteContestPermission(ContestPermission instance);
    partial void InsertContestSetting(ContestSetting instance);
    partial void UpdateContestSetting(ContestSetting instance);
    partial void DeleteContestSetting(ContestSetting instance);
    partial void InsertProblem(Problem instance);
    partial void UpdateProblem(Problem instance);
    partial void DeleteProblem(Problem instance);
    partial void InsertSolution(Solution instance);
    partial void UpdateSolution(Solution instance);
    partial void DeleteSolution(Solution instance);
    #endregion
		
		public ProgrammingContestDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ProgrammingContestConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ProgrammingContestDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProgrammingContestDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProgrammingContestDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProgrammingContestDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<ContestPermission> ContestPermissions
		{
			get
			{
				return this.GetTable<ContestPermission>();
			}
		}
		
		public System.Data.Linq.Table<ContestSetting> ContestSettings
		{
			get
			{
				return this.GetTable<ContestSetting>();
			}
		}
		
		public System.Data.Linq.Table<Problem> Problems
		{
			get
			{
				return this.GetTable<Problem>();
			}
		}
		
		public System.Data.Linq.Table<Solution> Solutions
		{
			get
			{
				return this.GetTable<Solution>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _IPAddress;
		
		private EntitySet<ContestPermission> _ContestPermissions;
		
		private EntitySet<Solution> _Solutions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    #endregion
		
		public User()
		{
			this._ContestPermissions = new EntitySet<ContestPermission>(new Action<ContestPermission>(this.attach_ContestPermissions), new Action<ContestPermission>(this.detach_ContestPermissions));
			this._Solutions = new EntitySet<Solution>(new Action<Solution>(this.attach_Solutions), new Action<Solution>(this.detach_Solutions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ContestPermission", Storage="_ContestPermissions", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<ContestPermission> ContestPermissions
		{
			get
			{
				return this._ContestPermissions;
			}
			set
			{
				this._ContestPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Solution", Storage="_Solutions", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<Solution> Solutions
		{
			get
			{
				return this._Solutions;
			}
			set
			{
				this._Solutions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContestPermissions(ContestPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ContestPermissions(ContestPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Result")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Solution> _Solutions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Result()
		{
			this._Solutions = new EntitySet<Solution>(new Action<Solution>(this.attach_Solutions), new Action<Solution>(this.detach_Solutions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_Solution", Storage="_Solutions", ThisKey="ID", OtherKey="ResultId")]
		public EntitySet<Solution> Solutions
		{
			get
			{
				return this._Solutions;
			}
			set
			{
				this._Solutions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.Result = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContestPermission")]
	public partial class ContestPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContestId;
		
		private long _UserId;
		
		private EntityRef<User> _User;
		
		private EntityRef<ContestSetting> _ContestSetting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContestIdChanging(long value);
    partial void OnContestIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    #endregion
		
		public ContestPermission()
		{
			this._User = default(EntityRef<User>);
			this._ContestSetting = default(EntityRef<ContestSetting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContestId", DbType="BigInt NOT NULL")]
		public long ContestId
		{
			get
			{
				return this._ContestId;
			}
			set
			{
				if ((this._ContestId != value))
				{
					if (this._ContestSetting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContestIdChanging(value);
					this.SendPropertyChanging();
					this._ContestId = value;
					this.SendPropertyChanged("ContestId");
					this.OnContestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ContestPermission", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ContestPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ContestPermissions.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContestSetting_ContestPermission", Storage="_ContestSetting", ThisKey="ContestId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ContestSetting ContestSetting
		{
			get
			{
				return this._ContestSetting.Entity;
			}
			set
			{
				ContestSetting previousValue = this._ContestSetting.Entity;
				if (((previousValue != value) 
							|| (this._ContestSetting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContestSetting.Entity = null;
						previousValue.ContestPermissions.Remove(this);
					}
					this._ContestSetting.Entity = value;
					if ((value != null))
					{
						value.ContestPermissions.Add(this);
						this._ContestId = value.ID;
					}
					else
					{
						this._ContestId = default(long);
					}
					this.SendPropertyChanged("ContestSetting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContestSetting")]
	public partial class ContestSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private string _Name;
		
		private string _ArrangedBy;
		
		private bool _IsPrivate;
		
		private EntitySet<ContestPermission> _ContestPermissions;
		
		private EntitySet<Problem> _Problems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnArrangedByChanging(string value);
    partial void OnArrangedByChanged();
    partial void OnIsPrivateChanging(bool value);
    partial void OnIsPrivateChanged();
    #endregion
		
		public ContestSetting()
		{
			this._ContestPermissions = new EntitySet<ContestPermission>(new Action<ContestPermission>(this.attach_ContestPermissions), new Action<ContestPermission>(this.detach_ContestPermissions));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrangedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ArrangedBy
		{
			get
			{
				return this._ArrangedBy;
			}
			set
			{
				if ((this._ArrangedBy != value))
				{
					this.OnArrangedByChanging(value);
					this.SendPropertyChanging();
					this._ArrangedBy = value;
					this.SendPropertyChanged("ArrangedBy");
					this.OnArrangedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrivate", DbType="Bit NOT NULL")]
		public bool IsPrivate
		{
			get
			{
				return this._IsPrivate;
			}
			set
			{
				if ((this._IsPrivate != value))
				{
					this.OnIsPrivateChanging(value);
					this.SendPropertyChanging();
					this._IsPrivate = value;
					this.SendPropertyChanged("IsPrivate");
					this.OnIsPrivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContestSetting_ContestPermission", Storage="_ContestPermissions", ThisKey="ID", OtherKey="ContestId")]
		public EntitySet<ContestPermission> ContestPermissions
		{
			get
			{
				return this._ContestPermissions;
			}
			set
			{
				this._ContestPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContestSetting_Problem", Storage="_Problems", ThisKey="ID", OtherKey="ContestID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContestPermissions(ContestPermission entity)
		{
			this.SendPropertyChanging();
			entity.ContestSetting = this;
		}
		
		private void detach_ContestPermissions(ContestPermission entity)
		{
			this.SendPropertyChanging();
			entity.ContestSetting = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.ContestSetting = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.ContestSetting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Problems")]
	public partial class Problem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _PNumber;
		
		private string _PName;
		
		private string _Statement;
		
		private string _InputFile;
		
		private string _OutputFile;
		
		private long _Time;
		
		private long _ContestID;
		
		private string _Input;
		
		private string _Output;
		
		private EntitySet<Solution> _Solutions;
		
		private EntityRef<ContestSetting> _ContestSetting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnPNumberChanging(string value);
    partial void OnPNumberChanged();
    partial void OnPNameChanging(string value);
    partial void OnPNameChanged();
    partial void OnStatementChanging(string value);
    partial void OnStatementChanged();
    partial void OnInputFileChanging(string value);
    partial void OnInputFileChanged();
    partial void OnOutputFileChanging(string value);
    partial void OnOutputFileChanged();
    partial void OnTimeChanging(long value);
    partial void OnTimeChanged();
    partial void OnContestIDChanging(long value);
    partial void OnContestIDChanged();
    partial void OnInputChanging(string value);
    partial void OnInputChanged();
    partial void OnOutputChanging(string value);
    partial void OnOutputChanged();
    #endregion
		
		public Problem()
		{
			this._Solutions = new EntitySet<Solution>(new Action<Solution>(this.attach_Solutions), new Action<Solution>(this.detach_Solutions));
			this._ContestSetting = default(EntityRef<ContestSetting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PNumber
		{
			get
			{
				return this._PNumber;
			}
			set
			{
				if ((this._PNumber != value))
				{
					this.OnPNumberChanging(value);
					this.SendPropertyChanging();
					this._PNumber = value;
					this.SendPropertyChanged("PNumber");
					this.OnPNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PName
		{
			get
			{
				return this._PName;
			}
			set
			{
				if ((this._PName != value))
				{
					this.OnPNameChanging(value);
					this.SendPropertyChanging();
					this._PName = value;
					this.SendPropertyChanged("PName");
					this.OnPNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Statement", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Statement
		{
			get
			{
				return this._Statement;
			}
			set
			{
				if ((this._Statement != value))
				{
					this.OnStatementChanging(value);
					this.SendPropertyChanging();
					this._Statement = value;
					this.SendPropertyChanged("Statement");
					this.OnStatementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputFile", DbType="NVarChar(100)")]
		public string InputFile
		{
			get
			{
				return this._InputFile;
			}
			set
			{
				if ((this._InputFile != value))
				{
					this.OnInputFileChanging(value);
					this.SendPropertyChanging();
					this._InputFile = value;
					this.SendPropertyChanged("InputFile");
					this.OnInputFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutputFile", DbType="NVarChar(100)")]
		public string OutputFile
		{
			get
			{
				return this._OutputFile;
			}
			set
			{
				if ((this._OutputFile != value))
				{
					this.OnOutputFileChanging(value);
					this.SendPropertyChanging();
					this._OutputFile = value;
					this.SendPropertyChanged("OutputFile");
					this.OnOutputFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="BigInt NOT NULL")]
		public long Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContestID", DbType="BigInt NOT NULL")]
		public long ContestID
		{
			get
			{
				return this._ContestID;
			}
			set
			{
				if ((this._ContestID != value))
				{
					if (this._ContestSetting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContestIDChanging(value);
					this.SendPropertyChanging();
					this._ContestID = value;
					this.SendPropertyChanged("ContestID");
					this.OnContestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Input", DbType="NVarChar(MAX)")]
		public string Input
		{
			get
			{
				return this._Input;
			}
			set
			{
				if ((this._Input != value))
				{
					this.OnInputChanging(value);
					this.SendPropertyChanging();
					this._Input = value;
					this.SendPropertyChanged("Input");
					this.OnInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Output", DbType="NVarChar(MAX)")]
		public string Output
		{
			get
			{
				return this._Output;
			}
			set
			{
				if ((this._Output != value))
				{
					this.OnOutputChanging(value);
					this.SendPropertyChanging();
					this._Output = value;
					this.SendPropertyChanged("Output");
					this.OnOutputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_Solution", Storage="_Solutions", ThisKey="ID", OtherKey="ProblemId")]
		public EntitySet<Solution> Solutions
		{
			get
			{
				return this._Solutions;
			}
			set
			{
				this._Solutions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContestSetting_Problem", Storage="_ContestSetting", ThisKey="ContestID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ContestSetting ContestSetting
		{
			get
			{
				return this._ContestSetting.Entity;
			}
			set
			{
				ContestSetting previousValue = this._ContestSetting.Entity;
				if (((previousValue != value) 
							|| (this._ContestSetting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContestSetting.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._ContestSetting.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._ContestID = value.ID;
					}
					else
					{
						this._ContestID = default(long);
					}
					this.SendPropertyChanged("ContestSetting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Solution")]
	public partial class Solution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _UserId;
		
		private long _ProblemId;
		
		private long _ContestId;
		
		private long _ResultId;
		
		private System.DateTime _time;
		
		private string _FileName;
		
		private double _RequireTime;
		
		private string _Output;
		
		private string _SolutionFileName;
		
		private EntityRef<Problem> _Problem;
		
		private EntityRef<Result> _Result;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnProblemIdChanging(long value);
    partial void OnProblemIdChanged();
    partial void OnContestIdChanging(long value);
    partial void OnContestIdChanged();
    partial void OnResultIdChanging(long value);
    partial void OnResultIdChanged();
    partial void OntimeChanging(System.DateTime value);
    partial void OntimeChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnRequireTimeChanging(double value);
    partial void OnRequireTimeChanged();
    partial void OnOutputChanging(string value);
    partial void OnOutputChanged();
    partial void OnSolutionFileNameChanging(string value);
    partial void OnSolutionFileNameChanged();
    #endregion
		
		public Solution()
		{
			this._Problem = default(EntityRef<Problem>);
			this._Result = default(EntityRef<Result>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemId", DbType="BigInt NOT NULL")]
		public long ProblemId
		{
			get
			{
				return this._ProblemId;
			}
			set
			{
				if ((this._ProblemId != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemId = value;
					this.SendPropertyChanged("ProblemId");
					this.OnProblemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContestId", DbType="BigInt NOT NULL")]
		public long ContestId
		{
			get
			{
				return this._ContestId;
			}
			set
			{
				if ((this._ContestId != value))
				{
					this.OnContestIdChanging(value);
					this.SendPropertyChanging();
					this._ContestId = value;
					this.SendPropertyChanged("ContestId");
					this.OnContestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultId", DbType="BigInt NOT NULL")]
		public long ResultId
		{
			get
			{
				return this._ResultId;
			}
			set
			{
				if ((this._ResultId != value))
				{
					if (this._Result.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultIdChanging(value);
					this.SendPropertyChanging();
					this._ResultId = value;
					this.SendPropertyChanged("ResultId");
					this.OnResultIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="DateTime NOT NULL")]
		public System.DateTime time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequireTime", DbType="Float NOT NULL")]
		public double RequireTime
		{
			get
			{
				return this._RequireTime;
			}
			set
			{
				if ((this._RequireTime != value))
				{
					this.OnRequireTimeChanging(value);
					this.SendPropertyChanging();
					this._RequireTime = value;
					this.SendPropertyChanged("RequireTime");
					this.OnRequireTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Output", DbType="NVarChar(MAX)")]
		public string Output
		{
			get
			{
				return this._Output;
			}
			set
			{
				if ((this._Output != value))
				{
					this.OnOutputChanging(value);
					this.SendPropertyChanging();
					this._Output = value;
					this.SendPropertyChanged("Output");
					this.OnOutputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionFileName", DbType="NVarChar(100)")]
		public string SolutionFileName
		{
			get
			{
				return this._SolutionFileName;
			}
			set
			{
				if ((this._SolutionFileName != value))
				{
					this.OnSolutionFileNameChanging(value);
					this.SendPropertyChanging();
					this._SolutionFileName = value;
					this.SendPropertyChanged("SolutionFileName");
					this.OnSolutionFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_Solution", Storage="_Problem", ThisKey="ProblemId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.Solutions.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.Solutions.Add(this);
						this._ProblemId = value.ID;
					}
					else
					{
						this._ProblemId = default(long);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_Solution", Storage="_Result", ThisKey="ResultId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Result Result
		{
			get
			{
				return this._Result.Entity;
			}
			set
			{
				Result previousValue = this._Result.Entity;
				if (((previousValue != value) 
							|| (this._Result.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Result.Entity = null;
						previousValue.Solutions.Remove(this);
					}
					this._Result.Entity = value;
					if ((value != null))
					{
						value.Solutions.Add(this);
						this._ResultId = value.ID;
					}
					else
					{
						this._ResultId = default(long);
					}
					this.SendPropertyChanged("Result");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Solution", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Solutions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Solutions.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
